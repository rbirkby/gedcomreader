<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThunderMain.GedComReader</name>
    </assembly>
    <members>
        <member name="T:ThunderMain.GedcomReader.DefaultedXmlReader">
            <summary>
            Defaults (ie changes from abstract to virtual) many methods in XmlReader.
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.DefaultedXmlReader.ReadString">
            <summary>
            Returns the value of the current node
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.DefaultedXmlReader.ReadInnerXml">
            <summary>
            Throws a not implemented exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.DefaultedXmlReader.ResolveEntity">
            <summary>
            Always throws an invalid operation exception
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.DefaultedXmlReader.LookupNamespace(System.String)">
            <summary>
            Always throws a not implemented exception
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.DefaultedXmlReader.ReadOuterXml">
            <summary>
            Always throws a not implemented exception
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.Item(System.String,System.String)">
            <summary>
            Returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.Item(System.String)">
            <summary>
            Returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.Item(System.Int32)">
            <summary>
            Returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.EOF">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.ReadState">
            <summary>
            Always returns ReadState.Initial
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.Prefix">
            <summary>
            Always returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.NamespaceURI">
            <summary>
            Always returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.Name">
            <summary>
            Returns the local name of the current node
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.XmlLang">
            <summary>
            Always returns an empty string
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.XmlSpace">
            <summary>
            Always returns XmlSpace.None
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.QuoteChar">
            <summary>
            Always returns a single quote
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.IsDefault">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.IsEmptyElement">
            <summary>
            Always returns false
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.DefaultedXmlReader.BaseURI">
            <summary>
            Always returns an empty string
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomAttribute.#ctor(ThunderMain.GedcomReader.GedcomAttributeType,System.Char[])">
            <summary>
            Creates a new attribute of the given type (REF or ID) with the
            given string value.
            </summary>
            <param name="type"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomAttribute.Name">
            <summary>
            Gets the name of this attribute. GEDML only has 2 attributes -
            REF and ID.
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomAttribute.Value">
            <summary>Gets the value of the attribute</summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.GedcomCharType">
            <summary>
            Singleton providing utility methods to validate GEDCOM characters
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsLevelChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for a level tag.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsTagChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for a Tag.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsXrefChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for an XREF.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsLineValueChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for a Line Value.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsDelimChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for a delimited.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomCharType.IsTerminatorChar(System.Char)">
            <summary>
            Determines whether the given character is an allowed character for a terminator.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:ThunderMain.GedcomReader.GedcomException">
            <summary>
            GEDCOM Reader throws exceptions when:
            *
            *
            *
            </summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadLevelChar">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadTagChar">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadXrefChar">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadEscapeChar">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadLinevalueChar">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.UnexpectedEof">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.UnexpectedToken">
            <summary></summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.GedcomException.BadLevel">
            <summary></summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomException.#ctor(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThunderMain.GedcomReader.GedcomException"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="ch">The ch.</param>
            <param name="linePos">The line pos.</param>
            <param name="lineNum">The line num.</param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomException.LinePos">
            <summary></summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomException.LineNum">
            <summary></summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomException.Character">
            <summary></summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomException.Exception">
            <summary></summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.GedcomAttributeType">
            <summary>
            GEDML only has two attribute types - a REF type which references
            other elements - ie the FAMC GEDCOM tag, or the ID type which defines
            the identifier for the GEDCOM tag
            </summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.GedcomReader">
            <summary>
            Provides an implementation of XmlReader for reading GEDCOM files
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.HasLineInfo">
            <summary>
            Returns true to indicate we supply line information
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new GEDCOM Reader to read from a stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.ReadAttributeValue">
            <summary>
            parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.Close">
            <summary>
            Closes the reader
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.ToString">
            <summary>
            Returns a human readable string representation of the current node
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.SneakyPeek(System.Collections.Generic.Queue{ThunderMain.GedcomReader.GedcomReader.TokenInfo})">
            <summary>
            Peeks the item at the end of the queue
            </summary>
            <param name="queue"></param>
            <returns>The object at the end of the queue</returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.ReadLine">
            <summary>
            Reads a line of tokens and places the corresponding XML nodes into a queue
            
            Good candidate for performance improvements
            GEDCOMReader is actually faster than XmlReader. However, it allocates more strings
            and these are objects, so the GC has to do more work. - Since the char[] rewrite, this may 
            no longer be true
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="i"></param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.
            </summary>
            <param name="localName"></param>
            <param name="namespaceUri"></param>
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"/>.
            </summary>
            <param name="i"></param>
            <returns>
            The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.
            </summary>
            <param name="localName"></param>
            <param name="namespaceUri"></param>
            <returns>
            The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.
            </returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomReader.GetAttribute(System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>
            The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.
            </returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.LineNumber">
            <summary>
            Returns the number of the current line
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.LinePosition">
            <summary>
            Returns the current column position along a line
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.NameTable">
            <summary>
            Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.
            </summary>
            <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <returns>The number of attributes on the current node.</returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <returns>The depth of the current node in the XML document.</returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.HasValue">
            <summary>
            Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.
            </summary>
            <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
            <exception cref="T:ThunderMain.GedcomReader.GedcomException"></exception>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
            <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
        </member>
        <member name="T:ThunderMain.GedcomReader.GedcomWriter">
            <summary>
            Writes GEDCOM format to the provided output location
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.#ctor(System.IO.TextWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="w"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.LookupPrefix(System.String)">
            <summary>
            
            </summary>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteCData(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteCharEntity(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteComment(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="pubid"></param>
            <param name="sysid"></param>
            <param name="subset"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteEndAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteEndDocument">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteEndElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteEntityRef(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteFullEndElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteNmToken(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="text"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteRaw(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteStartDocument">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteStartDocument(System.Boolean)">
            <summary>
            
            </summary>
            <param name="standalone"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteString(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="lowChar"></param>
            <param name="highChar"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.GedcomWriter.WriteWhitespace(System.String)">
            <summary>
            
            </summary>
            <param name="ws"></param>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomWriter.WriteState">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomWriter.XmlLang">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.GedcomWriter.XmlSpace">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.Scanner">
            <summary>
            The lexical analysis phase of the Gedcom parser.
            The scanner is initialized on the first character
            </summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.None">
            <summary>No current token</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Level">
            <summary>A level token</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Tag">
            <summary>A GEDCOM tag</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Xref">
            <summary>A cross-reference token</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Text">
            <summary>A text node</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Escape">
            <summary>An escape section</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Eol">
            <summary>The end of a line</summary>
        </member>
        <member name="F:ThunderMain.GedcomReader.Scanner.Eof">
            <summary>The end of a file</summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.Close">
            <summary>
            Closes the scanner
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.SwitchEncoding(System.Text.Encoding)">
            <summary>
            Instructs the scanner reader to decode bytes using a different character set decoder
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ReadAll(ThunderMain.GedcomReader.Scanner,System.IO.TextWriter)">
            <summary>
            Test method used during development
            </summary>
            <param name="scanner"></param>
            <param name="output"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.Main">
            <summary>
            Test Main() for when we compile this as a standalone console app during
            development
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a new Lexical analyser, reading from the given stream
            </summary>
            <param name="stream"></param>
            <param name="strict">true to conform strictly to the GEDCOM spec</param>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ToString">
            <summary>
            Gets a human readable representation of the current token
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ScanLevel">
            <summary>
            Read the GEDCOM Level identifier
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ScanTag">
            <summary>
            Read the GEDCOM Tag identifier
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ScanXref">
            <summary>
            Read a GEDCOM XREF - a string delineated by '@' symbols
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ScanText">
            <summary>
            Read the 'Value' of the GEDCOM line
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ScanEscape">
            <summary>
            Read a GEDCOM escape sequence
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.ReadToEol">
            <summary>
            Advance to the end of the current line, consuming all tokens
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.Scanner.NextToken">
            <summary>
            Pull the next token off the stream
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.Scanner.LineNumber">
            <summary>
            Gets the line number of the current token
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.Scanner.LinePosition">
            <summary>
            Gets the column position of the current token
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.Scanner.Lexeme">
            <summary>
            Gets the most recent token's value from the scanner
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.Scanner.LexemeNT">
            <summary>
            Obtains the current token value from the Xml Name Table
            </summary>
        </member>
        <member name="P:ThunderMain.GedcomReader.Scanner.CurrentToken">
            <summary>
            Gets the current token type - defined as constant values
            </summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.StreamScannerReader">
            <summary>
            Provide a facade onto a stream of characters, extending it with facilities such as Lexeme Start and 
            Lexeme End marking
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.SwitchEncoding(System.Text.Encoding)">
            <summary>
            Instructs the scanner reader to decode bytes using a different character set decoder
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.CurrChar">
            <summary>
            Gets the current character in the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.ReadChar">
            <summary>
            Read a new character from the stream
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.MarkLexemeStart">
            <summary>
            Set a marker at the current character position to indicate the start of a token
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.MarkLexemeEnd">
            <summary>
            Sets a marker at the current character position to indicate the end of a token
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.MarkLineStart">
            <summary>
            Marks the start of the line in the token stream
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.MarkedLength">
            <summary>
            Gets the number of characters marked
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThunderMain.GedcomReader.StreamScannerReader.CurrColumn">
            <summary>
            Gets the horizontal position of the current character
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThunderMain.GedcomReader.StreamScannerReader.Lexeme">
            <summary>
            Obtains the current token value
            </summary>
        </member>
        <member name="T:ThunderMain.GedcomReader.UnicodeCompositionDecoder">
            <summary>
            Provides a decorator around another Decoder.
            Converts characters from the internal decoder from Unicode decomposed
            characters into precomposed characters
            </summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.UnicodeCompositionDecoder.#ctor(System.Text.Decoder)">
            <summary></summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.UnicodeCompositionDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:ThunderMain.GedcomReader.UnicodeCompositionDecoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary></summary>
        </member>
    </members>
</doc>
